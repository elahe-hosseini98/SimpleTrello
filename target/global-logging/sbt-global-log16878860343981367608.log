[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Elahe\AppData\Local\Temp\idea2.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Elahe\AppData\Local\Temp\idea2.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 11.0.14)
[debug]       Load.loadUnit: plugins took 164.6388ms
[debug]       Load.loadUnit: defsScala took 0.4596ms
[debug] [Loading] Scanning directory C:\Users\Elahe\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Elahe\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 32.829 ms
[debug]           Load.resolveProject(global-plugins) took 99.9928ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Elahe\.sbt\1.0\plugins, plugins: List(<none>))) took 185.3255ms
[debug] [Loading] Done in C:\Users\Elahe\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 220.4546ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.5194ms
[debug]     Load.loadUnit(file:/C:/Users/Elahe/.sbt/1.0/plugins/, ...) took 401.287ms
[debug]   Load.apply: load took 702.8406ms
[debug]   Load.apply: resolveProjects took 9.2405ms
[debug]   Load.apply: finalTransforms took 99.9875ms
[debug]   Load.apply: config.delegates took 15.9036ms
[debug]   Load.apply: Def.make(settings)... took 1061.4375ms
[debug]   Load.apply: structureIndex took 169.5771ms
[debug]   Load.apply: mkStreams took 2.795ms
[info] loading global plugins from C:\Users\Elahe\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 5581.5713ms
[debug]           Load.loadUnit: plugins took 84.1967ms
[debug]           Load.loadUnit: defsScala took 0.0094ms
[debug] [Loading] Scanning directory C:\Users\Elahe\Desktop\SimpleTrelloAPI\project
[debug]             Load.loadUnit: mkEval took 9.994ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Elahe\Desktop\SimpleTrelloAPI\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 4.0365 ms
[info] loading settings for project simpletrelloapi-build from idea2.sbt ...
[debug]               Load.resolveProject(simpletrelloapi-build) took 3.9684ms
[debug]             Load.loadTransitive: finalizeProject(Project(id simpletrelloapi-build, base: C:\Users\Elahe\Desktop\SimpleTrelloAPI\project, plugins: List(<none>))) took 8.8472ms
[debug] [Loading] Done in C:\Users\Elahe\Desktop\SimpleTrelloAPI\project, returning: (simpletrelloapi-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 251.6517ms
[debug]           Load.loadUnit: cleanEvalClasses took 7.7573ms
[debug]         Load.loadUnit(file:/C:/Users/Elahe/Desktop/SimpleTrelloAPI/project/, ...) took 345.3281ms
[debug]       Load.apply: load took 348.1056ms
[debug]       Load.apply: resolveProjects took 0.242ms
[debug]       Load.apply: finalTransforms took 17.488ms
[debug]       Load.apply: config.delegates took 0.5255ms
[debug]       Load.apply: Def.make(settings)... took 231.3398ms
[debug]       Load.apply: structureIndex took 51.508ms
[debug]       Load.apply: mkStreams took 0.0033ms
[info] loading project definition from C:\Users\Elahe\Desktop\SimpleTrelloAPI\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1369.3116ms
[debug]     Load.loadUnit: defsScala took 0.0066ms
[debug] [Loading] Scanning directory C:\Users\Elahe\Desktop\SimpleTrelloAPI
[debug]       Load.loadUnit: mkEval took 0.788ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.6313 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 61.9479ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Elahe\Desktop\SimpleTrelloAPI, plugins: List(<none>))) took 69.9282ms
[debug] [Loading] Done in C:\Users\Elahe\Desktop\SimpleTrelloAPI, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 201.411ms
[debug]     Load.loadUnit: cleanEvalClasses took 8.8945ms
[debug]   Load.loadUnit(file:/C:/Users/Elahe/Desktop/SimpleTrelloAPI/, ...) took 1580.8455ms
[debug] Load.apply: load took 1586.361ms
[debug] Load.apply: resolveProjects took 0.2037ms
[debug] Load.apply: finalTransforms took 54.4575ms
[debug] Load.apply: config.delegates took 0.5033ms
[debug] Load.apply: Def.make(settings)... took 288.4896ms
[debug] Load.apply: structureIndex took 41.4177ms
[debug] Load.apply: mkStreams took 0.0033ms
[info] set current project to SimpleTrelloAPI (in build file:/C:/Users/Elahe/Desktop/SimpleTrelloAPI/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 49886 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 49886, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to SimpleTrelloAPI (in build file:/C:/Users/Elahe/Desktop/SimpleTrelloAPI/)
[debug] > Exec(idea-shell, None, None)
