[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Elahe\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Elahe\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 11.0.14)
[debug]       Load.loadUnit: plugins took 157.6541ms
[debug]       Load.loadUnit: defsScala took 0.4371ms
[debug] [Loading] Scanning directory C:\Users\Elahe\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Elahe\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 28.9384 ms
[debug]           Load.resolveProject(global-plugins) took 66.4691ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Elahe\.sbt\1.0\plugins, plugins: List(<none>))) took 139.2554ms
[debug] [Loading] Done in C:\Users\Elahe\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 172.1129ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.372ms
[debug]     Load.loadUnit(file:/C:/Users/Elahe/.sbt/1.0/plugins/, ...) took 344.5648ms
[debug]   Load.apply: load took 632.1274ms
[debug]   Load.apply: resolveProjects took 11.2768ms
[debug]   Load.apply: finalTransforms took 122.1324ms
[debug]   Load.apply: config.delegates took 19.5179ms
[debug]   Load.apply: Def.make(settings)... took 875.1169ms
[debug]   Load.apply: structureIndex took 250.665ms
[debug]   Load.apply: mkStreams took 3.3628ms
[info] loading global plugins from C:\Users\Elahe\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4910.1349ms
[debug]           Load.loadUnit: plugins took 49.6804ms
[debug]           Load.loadUnit: defsScala took 0.0114ms
[debug] [Loading] Scanning directory C:\Users\Elahe\Desktop\SimpleTrelloAPI\project
[debug]             Load.loadUnit: mkEval took 17.4927ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Elahe\Desktop\SimpleTrelloAPI\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.0815 ms
[info] loading settings for project simpletrelloapi-build from idea1.sbt ...
[debug]               Load.resolveProject(simpletrelloapi-build) took 8.8667ms
[debug]             Load.loadTransitive: finalizeProject(Project(id simpletrelloapi-build, base: C:\Users\Elahe\Desktop\SimpleTrelloAPI\project, plugins: List(<none>))) took 12.8644ms
[debug] [Loading] Done in C:\Users\Elahe\Desktop\SimpleTrelloAPI\project, returning: (simpletrelloapi-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 4274.274ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.9313ms
[debug]         Load.loadUnit(file:/C:/Users/Elahe/Desktop/SimpleTrelloAPI/project/, ...) took 4332.7052ms
[debug]       Load.apply: load took 4334.9516ms
[debug]       Load.apply: resolveProjects took 0.2096ms
[debug]       Load.apply: finalTransforms took 12.3076ms
[debug]       Load.apply: config.delegates took 0.5065ms
[debug]       Load.apply: Def.make(settings)... took 176.2955ms
[debug]       Load.apply: structureIndex took 43.0858ms
[debug]       Load.apply: mkStreams took 0.0032ms
[info] loading project definition from C:\Users\Elahe\Desktop\SimpleTrelloAPI\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 7730.2473ms
[debug]     Load.loadUnit: defsScala took 0.0045ms
[debug] [Loading] Scanning directory C:\Users\Elahe\Desktop\SimpleTrelloAPI
[debug]       Load.loadUnit: mkEval took 0.4823ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.2527 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 52.0452ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Elahe\Desktop\SimpleTrelloAPI, plugins: List(<none>))) took 58.4665ms
[debug] [Loading] Done in C:\Users\Elahe\Desktop\SimpleTrelloAPI, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2238.4796ms
[debug]     Load.loadUnit: cleanEvalClasses took 20.0063ms
[debug]   Load.loadUnit(file:/C:/Users/Elahe/Desktop/SimpleTrelloAPI/, ...) took 9989.6653ms
[debug] Load.apply: load took 9992.2036ms
[debug] Load.apply: resolveProjects took 0.1808ms
[debug] Load.apply: finalTransforms took 39.0999ms
[debug] Load.apply: config.delegates took 0.5166ms
[debug] Load.apply: Def.make(settings)... took 127.5383ms
[debug] Load.apply: structureIndex took 37.5896ms
[debug] Load.apply: mkStreams took 0.0029ms
[info] set current project to SimpleTrelloAPI (in build file:/C:/Users/Elahe/Desktop/SimpleTrelloAPI/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 49886 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 49886, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to SimpleTrelloAPI (in build file:/C:/Users/Elahe/Desktop/SimpleTrelloAPI/)
[debug] > Exec(idea-shell, None, None)
